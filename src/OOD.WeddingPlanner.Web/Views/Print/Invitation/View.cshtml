@using Lsw.Abp.AspNetCore.Mvc.UI.Theme.Stisla.Themes.Stisla.Components.Toolbar.LanguageSwitch
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Mvc.Localization
@using OOD.WeddingPlanner.Localization
@using Newtonsoft.Json.Serialization
@using OOD.WeddingPlanner.Web.Pages.Invitees.ViewModels
@using Volo.Abp.AspNetCore.Mvc.UI.Theming
@model OOD.WeddingPlanner.Web.Models.ViewInvitationModel
@inject IHtmlLocalizer<WeddingPlannerResource> L
@inject IThemeManager ThemeManager
@{
    Layout = ThemeManager.CurrentTheme.GetLayout(StandardLayouts.Empty);

    Func<string, bool, IEnumerable<SelectListItem>> get_menu = (selected, child) => { 
        IEnumerable<SelectListItem> ret = new [] {
            new SelectListItem(L["MenuNone"].Value, "None", selected == "None"),
            new SelectListItem(L["MenuChildFree"].Value, "ChildFree", selected == "ChildFree"),
            new SelectListItem(L["MenuChild"].Value, "Child", selected == "Child"),
            new SelectListItem(L["MenuAdult"].Value, "Adult", selected == "Adult")
        };
        if(!child) {
            ret = new [] {
                new SelectListItem(L["MenuAdult"].Value, "Adult", selected == "Adult")
            };
        }

        if(string.IsNullOrWhiteSpace(selected)) {
            ret = new [] { new SelectListItem(L["Select a menu"].Value, "None", string.IsNullOrWhiteSpace(selected), true) }
                .Concat(ret);
        }
        return ret;
    };
}

@section scripts
{
<abp-script src="/Pages/Invitations/view.js" />
<abp-script src="/libs/leaflet/dist/leaflet.js" />
<abp-script src="/libs/leaflet-providers/leaflet-providers.js" />
<script>
    var model = @Json.Serialize(Model);
    $(function(){
        abp.currentTenant.name = '@(Context.Items["TenantName"])';
    });
</script>
}
@section styles
{
<abp-style src="/empty-layout.css" />
<abp-style src="/invitation.css" />
<abp-style src="/libs/leaflet/dist/leaflet.css" />
}

<style>
    .d-none {
        display: none;
    }
    .invitee-menu select {
        height: 30px !important;
        padding: 0px !important;
    }
    .lds-ripple {
    display: inline-block;
    position: relative;
    width: 80px;
    height: 80px;
    }
    .lds-ripple div {
    position: absolute;
    border: 4px solid #fdd;
    opacity: 1;
    border-radius: 50%;
    animation: lds-ripple 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;
    }
    .lds-ripple div:nth-child(2) {
    animation-delay: -0.5s;
    }
    @@keyframes lds-ripple {
        0% {
            top: 36px;
            left: 36px;
            width: 0;
            height: 0;
            opacity: 0;
        }
        4.9% {
            top: 36px;
            left: 36px;
            width: 0;
            height: 0;
            opacity: 0;
        }
        5% {
            top: 36px;
            left: 36px;
            width: 0;
            height: 0;
            opacity: 1;
        }
        100% {
            top: 0px;
            left: 0px;
            width: 72px;
            height: 72px;
            opacity: 0;
        }
    }
    #page-loader {
        position: fixed;
        top: 0px;
        left: 0px;
        width: 100vw;
        height: 100vh;
        display: table;
        background-color: rgb(251, 249, 245);
        z-index: 10000;
    }
    #page-loader-container {
        display: table-cell;
        vertical-align: middle;
        height: 100%;
    }
    @Html.Raw(Model.Wedding.InvitationStyle)
</style>
<div id="page-loader" class="text-center">
    <div id="page-loader-container">
        <div class="lds-ripple"><div></div><div></div></div>
    </div>
</div>
<script>

function docReady(fn) {
    // see if DOM is already available
    if (document.readyState === "complete" || document.readyState === "interactive") {
        // call on next available tick
        setTimeout(fn, 1);
    } else {
        document.addEventListener("DOMContentLoaded", fn);
    }
}    
docReady(function() {
    setTimeout(function(){
        $('#page-loader').fadeOut( 1000 );
    }, 100);
});
</script>
<div id="header"></div>
<abp-card>
    <abp-container>
        <abp-row class="language-row">
            <abp-column>
                @await Component.InvokeAsync(typeof(LanguageSwitchViewComponent))
            </abp-column>
        </abp-row>
        <abp-row>
            <abp-column class="text-center">
                <h2>@Model.Wedding.GroomName & @Model.Wedding.BrideName</h2>
            </abp-column>
        </abp-row>
        <hr />
        <script>window.app_culture = '@System.Globalization.CultureInfo.CurrentUICulture.TwoLetterISOLanguageName';</script>
        @Html.Raw(Model.Wedding.InvitationNote)
        <abp-row>
            <abp-column>
                <abp-container>
                    <hr />
                    <abp-row>
                        <abp-column>
                            <span>@L["PleaseConfirmInvitees"]</span>
                        </abp-column>
                    </abp-row>
                    <div class="form-row mb-2">
                        @foreach (var invitee in Model.Invitation.Invitees)
                        {
                            <div class="col-auto align-top">
                                <div class="input-group mb-1">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">
                                            @{
                                                if (invitee.Child)
                                                {
                                                    <i class="fa fa-child"></i>
                                                }
                                                else if (invitee.Male)
                                                {
                                                    <i class="fa fa-male"></i>
                                                }
                                                else
                                                {
                                                    <i class="fa fa-female"></i>
                                                }
                                            }
                                        </span>
                                    </div>
                                    <span class="form-control">
                                        @invitee.Name @invitee.Surname
                                    </span>
                                    <div class="input-group-append">
                                        <span class="input-group-text">
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="rsvp-@invitee.Id" id="rsvp-@invitee.Id-1" value="false" data-invitee-id="@invitee.Id" data-rsvp @Html.Raw((invitee.Confirmed == false) ? "checked" : "")>
                                                <label class="form-check-label" for="rsvp-@invitee.Id-1">@L["No"]</label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="rsvp-@invitee.Id" id="rsvp-@invitee.Id-2" value="true" data-invitee-id="@invitee.Id" data-rsvp @Html.Raw((invitee.Confirmed == true) ? "checked" : "")>
                                                <label class="form-check-label" for="rsvp-@invitee.Id-2">@L["Yes"]</label>
                                            </div>
                                        </span>
                                    </div>
                                </div>
                                @{
                                    if (invitee.Child)
                                    {
                                        <div class="invitee-menu @(((invitee.Confirmed.HasValue && invitee.Confirmed.Value) ? "" : "d-none"))">
                                            <select class="form-control" data-menu data-invitee-id="@invitee.Id" name="menu-@invitee.Id" aria-placeholder="@(L["Select a menu"])" asp-items="get_menu(invitee.Menu, invitee.Child)"></select>
                                        </div>
                                    }
                                }
                            </div>
                        }
                        @if (Model.Invitation.PlusOne && !Model.Invitation.Invitees.Any(p => p.PlusOne))
                        {
                            <div class="modal fade" id="add-plus-one-modal" tabindex="-1" aria-labelledby="addPlusOneModalLabel" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="addPlusOneModalLabel">@L["AddPlusOne"]</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <abp-dynamic-form abp-model=PlusOne data-type="plus-one-form"></abp-dynamic-form>
                                        </div>
                                        <div class="modal-footer">
                                            <span type="button" class="btn btn-secondary" data-bs-dismiss="modal">@L["Close"]</span>
                                            <span type="button" class="btn btn-primary" data-type="save">@L["Save"]</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-auto">
                                <div class="input-group mb-3">
                                    <span class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#add-plus-one-modal">@L["AddPlusOne"]</span>
                                </div>
                            </div>
                        }
                    </div>
                </abp-container>
            </abp-column>
        </abp-row>
        <abp-row>
            <abp-column>
                <abp-container>
                    <abp-row>
                        <abp-column data-events>
                            <abp-tabs>
                                @{
                                    bool active = true;
                                }
                                @foreach (var evt in Model.Wedding.Events)
                                {
                                    <abp-tab title=@evt.Name active=active>
                                        <abp-container data-event-id=@evt.Id>
                                            <abp-row>
                                                <abp-column size-lg=_6>
                                                    <div class="event-line"><h5>@evt.Location.Name</h5> <a href="@(!string.IsNullOrEmpty(evt.Location.ParkingGoogleLink) ? evt.Location.ParkingGoogleLink : $"http://maps.google.com/?q={evt.Location.Name}&sll={evt.Location.Latitude},{evt.Location.Longitude}")" class="btn btn-primary" target="_blank">@L["GetDirections"]</a></div>
                                                    <span>@evt.Location.Hall</span> <br />
                                                    <span>@evt.Location.Address</span>
                                                </abp-column>
                                                <abp-column size-lg=_6>
                                                    <span>@evt.Time.ToLongTimeString()</span> <br />
                                                    <span>@evt.Time.ToLongDateString()</span>
                                                </abp-column>
                                            </abp-row>
                                        </abp-container>
                                    </abp-tab>
                                    active = false;
                                }
                            </abp-tabs>
                        </abp-column>
                    </abp-row>
                    <abp-row>
                        <abp-column>
                            <div id="map"></div>
                        </abp-column>
                    </abp-row>
                </abp-container>
            </abp-column>
        </abp-row>
    </abp-container>
</abp-card>
<div id="footer"></div>